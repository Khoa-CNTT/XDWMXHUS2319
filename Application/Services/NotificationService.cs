namespace Application.Services
{
    public class NotificationService : INotificationService
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly IPostService _postService;
        private readonly IPublisher _publisher;  // üî• D√πng Event Bus ƒë·ªÉ publish event
        private readonly IUserContextService _userContextService;
        private readonly IMapService _mapService;
        private readonly IEmailService _emailService;
        private readonly ICommentService _commentService;
        public NotificationService( IUnitOfWork unitOfWork,IPublisher publisher,
            IUserContextService userContextService, IEmailService emailService,
            IPostService postService,IMapService mapService, ICommentService commentService)

        {
            _unitOfWork = unitOfWork;
            _publisher = publisher;

            _emailService = emailService;
            _userContextService = userContextService;
            _postService = postService;
            _mapService = mapService;
            _commentService = commentService;
        }

        public async Task SendAcceptFriendNotificationAsync(Guid friendId, Guid userId)
        {
            var user = await _unitOfWork.UserRepository.GetByIdAsync(userId);
            if (user == null || friendId == userId) return;

            string? avatar = null;
            if (!string.IsNullOrEmpty(user.ProfilePicture))
            {
                avatar = $"{Constaint.baseUrl}{user.ProfilePicture}";
            }
            var message = $"{user.FullName} ƒë√£ ch·∫•p nh·∫≠n l·ªùi m·ªùi k·∫øt b·∫°n";

            var data = new ResponseNotificationModel
            {
                Message = message,
                Avatar = avatar ?? "",
                Url = $"/profile/{userId}"
            };

            await _publisher.Publish(new AnswerFriendEvent(friendId, data));
        }

        public async Task SendAlertAsync(Guid driverId, string message)
        {
            var user = await _unitOfWork.UserRepository.GetByIdAsync(driverId);
            if (user == null) return;
            await _publisher.Publish(new SendInAppNotificationEvent(driverId, message));
            if (!string.IsNullOrEmpty(user.Email))
            {
                await _emailService.SendEmailAsync(user.Email, "C·∫£nh b√°o GPS", message);
            }
        }

        public async Task SendCommentNotificationAsync(Guid postId, Guid commenterId)
        {
            var postOwnerId = await _postService.GetPostOwnerId(postId);
            if (postOwnerId == commenterId) return;
            var user = await _unitOfWork.UserRepository.GetByIdAsync(commenterId);
            if (user == null) return;
            string? avatar = null;
            if (!string.IsNullOrEmpty(user.ProfilePicture))
            {
                avatar = $"{Constaint.baseUrl}{user.ProfilePicture}";
            }

            var message = $"{user.FullName} ƒë√£ b√¨nh lu·∫≠n v√†o b√†i vi·∫øt c·ªßa b·∫°n";
            var data = new ResponseNotificationModel
            {
                Message = message,
                Avatar = avatar ?? "",
                Url = $"/profile/{commenterId}"
            };
            await _publisher.Publish(new CommentEvent(postOwnerId, data));
        }

        public async Task SendFriendNotificationAsync(Guid friendId, Guid userId)
        {
            var user = await _unitOfWork.UserRepository.GetByIdAsync(userId);
            if (user == null || friendId == userId) return;

            string? avatar = null;
            if (!string.IsNullOrEmpty(user.ProfilePicture))
            {
                avatar = $"{Constaint.baseUrl}{user.ProfilePicture}";
            }

            var message = $"{user.FullName} ƒë√£ g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n";

            var data = new ResponseNotificationModel
            {
                Message = message,
                Avatar = avatar ?? "",
                Url = $"/profile/{userId}"
            };

            await _publisher.Publish(new SendFriendEvent(friendId, data));
        }

        public async Task SendInAppNotificationAsync(Guid driverId, string message)
        {

            await _publisher.Publish(new SendInAppNotificationEvent(driverId,message));
        }

        public async Task SendLikeNotificationAsync(Guid postId, Guid userId)
        {
            var name = _userContextService.FullName();
            bool status = await _unitOfWork.LikeRepository.CheckLike(postId, userId);
            var ownerId = await _postService.GetPostOwnerId(postId);
            Task.Delay(2000).Wait();
            if (!status)
            {
                await _publisher.Publish(new LikeEvent(postId, ownerId, $"{name} ƒë√£ th√≠ch b√†i ƒëƒÉng c·ªßa b·∫°n v√†o l√∫c {FormatUtcToLocal(DateTime.UtcNow)}"));
            }
            else
            {
                await _publisher.Publish(new LikeEvent(postId, ownerId, $"{name} ƒë√£ b·ªè th√≠ch b√†i ƒëƒÉng c·ªßa b·∫°n v√†o l√∫c {FormatUtcToLocal(DateTime.UtcNow)}"));
            }

        }

        public async Task SendNotificationNewMessageAsync(Guid conversationId, Guid receiverId, string content, Guid messageId)
        {
            try
            {
                const int maxLength = 40;
                string truncatedContent = content.Length > maxLength ? content.Substring(0, maxLength) + "..." : content;

                var conversation = await _unitOfWork.ConversationRepository.GetByIdAsync(conversationId);
                if (conversation == null) return;

                var senderId = conversation.User1Id == receiverId ? conversation.User2Id : conversation.User1Id;
                var receiver = await _unitOfWork.UserRepository.GetByIdAsync(receiverId);
                if (receiver == null) return;

                var senderName = await _unitOfWork.UserRepository.GetFullNameByIdAsync(senderId);
                string message = $"{senderName} ƒë√£ g·ª≠i cho b·∫°n m·ªôt tin nh·∫Øn: {truncatedContent}";
                await _publisher.Publish(new SendMessageNotificationEvent( messageId,senderId, receiverId, message));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error sending notification: {ex.Message}");
            }
        }
        public async Task SendNotificationUpdateLocationAsync(Guid driverId, Guid passengerId, float lat, float lng, string location, bool isEnd)
        {
            var driver = await _unitOfWork.UserRepository.GetByIdAsync(driverId);
            var passenger = await _unitOfWork.UserRepository.GetByIdAsync(passengerId);
            if (driver == null || passenger == null) return;

            if (isEnd)
            {
                string endMessage = $"Chuy·∫øn ƒëi ƒë√£ k·∫øt th√∫c t·∫°i: {location}";
                await _publisher.Publish(new UpdateLocationEvent(driverId, passengerId, endMessage));
                //await _signalRNotificationService.SendNotificationUpdateLocationSignalR(driverId, passengerId, endMessage); // G·ªçi SignalR
                await _emailService.SendEmailAsync(
                    driver.Email,
                    "Th√¥ng b√°o!!",
                    $"Chuy·∫øn ƒëi ƒë√£ k·∫øt th√∫c!! v√†o l√∫c {FormatUtcToLocal(DateTime.UtcNow)} - H√£y nh·∫Øc nh·ªü h√†nh kh√°ch ƒë√°nh gi√° b·∫°n nh√©!!"
                );
                await _emailService.SendEmailAsync(
                    passenger.Email,
                    "Th√¥ng b√°o!!",
                    $"Chuy·∫øn ƒëi ƒë√£ k·∫øt th√∫c!! v√†o l√∫c {FormatUtcToLocal(DateTime.UtcNow)} - B·∫°n c√≥ c·∫£m th·∫•y h√†i l√≤ng v·ªÅ t√†i x·∫ø n√†y kh√¥ng??"
                );
            }
            else
            {
                string locationMessage = $"B·∫°n ƒëang ·ªü: {location}";
                await _publisher.Publish(new UpdateLocationEvent(driverId, passengerId, locationMessage));
                //await _signalRNotificationService.SendNotificationUpdateLocationSignalR(driverId, passengerId, locationMessage); // G·ªçi SignalR
            }
        }

        public async Task SendRejectFriendNotificationAsync(Guid friendId, Guid userId)
        {
            var user = await _unitOfWork.UserRepository.GetByIdAsync(userId);
            if (user == null || friendId == userId) return;

            string? avatar = null;
            if (!string.IsNullOrEmpty(user.ProfilePicture))
            {
                avatar = $"{Constaint.baseUrl}{user.ProfilePicture}";
            }

            var message = $"{user.FullName} ƒë√£ t·ª´ ch·ªëi l·ªùi m·ªùi k·∫øt b·∫°n";

            var data = new ResponseNotificationModel
            {
                Message = message,
                Avatar = avatar ?? "",
                Url = $"/profile/{userId}"
            };

            await _publisher.Publish(new AnswerFriendEvent(friendId, data));
        }

        public async Task SendReplyNotificationAsync(Guid postId, Guid commentId, Guid responderId)
        {
            var postOwnerId = await _postService.GetPostOwnerId(postId);
            var commentOwnerId = await _commentService.GetCommentOwnerId(commentId);
            if (commentOwnerId == responderId) return;

            var user = await _unitOfWork.UserRepository.GetByIdAsync(responderId);
            if (user == null) return;

            string? avatar = null;
            if (!string.IsNullOrEmpty(user.ProfilePicture))
            {
                avatar = $"{Constaint.baseUrl}{user.ProfilePicture}";
            }

            // Th√¥ng b√°o cho ch·ªß b√¨nh lu·∫≠n
            if (commentOwnerId != responderId)
            {
                var commentMsg = $"{user.FullName} ƒë√£ ph·∫£n h·ªìi b√¨nh lu·∫≠n c·ªßa b·∫°n";
                var commentData = new ResponseNotificationModel
                {
                    Message = commentMsg,
                    Avatar = avatar ?? "",
                    Url = $"/profile/{responderId}"
                };
                await _publisher.Publish(new ReplyCommentEvent(commentOwnerId, commentData));
            }

            // Th√¥ng b√°o cho ch·ªß b√†i vi·∫øt n·∫øu kh√°c ng∆∞·ªùi b√¨nh lu·∫≠n v√† ng∆∞·ªùi ph·∫£n h·ªìi
            if (postOwnerId != commentOwnerId && postOwnerId != responderId)
            {
                var postMsg = $"{user.FullName} ƒë√£ ph·∫£n h·ªìi b√¨nh lu·∫≠n v√†o b√†i vi·∫øt c·ªßa b·∫°n";
                var postData = new ResponseNotificationModel
                {
                    Message = postMsg,
                    Avatar = avatar ?? "",
                    Url = $"/profile/{responderId}"
                };
                await _publisher.Publish(new ReplyCommentEvent(postOwnerId, postData));
            }
        }
        public async Task SendShareNotificationAsync(Guid postId, Guid userId)
        {
            await _publisher.Publish(new ShareEvent(postId, userId));
        }
    }
}
